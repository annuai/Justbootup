/*
 * SlideTabs jQuery Plugin - www.slidetabs.com
 *
 * @version 1.0.6
 *
 * Copyright 2013, WebStack
 *
 * You need to purchase a license if you want to use this script:
 * http://www.slidetabs.com/pricing
 *
 */
(function($) {
    if (!$.stExtend) {
        $.stExtend = {}
    }

    function SlideTabs(c, d) {
        this.$container = c;
        this.$tabsCont = c.find('.' + d.classTabsContainer).first();
        this.$tabsInnerCont = this.$tabsCont.children('div');
        this.$tabs = this.$tabsInnerCont.children('ul').addClass(d.classTabsList);
        this.$lis = this.$tabs.children('li');
        this.$a = this.$lis.find('a').addClass(d.classTab);
        this.$contentCont = c.find('.' + d.classViewsContainer).first();
        this.$content = this.$contentCont;
        this.$views = this.$content.children('.' + d.classView);
        this.$prev = this.$tabsCont.find('.' + d.classBtnPrev);
        this.$next = this.$tabsCont.find('.' + d.classBtnNext);
        this.$doc = $(document);
        this.$tab;
        this.$tabActive = [];
        this.$li;
        this.$liLast;
        this.$view;
        this.$viewActive;
        this.val = {};
        this.e;
        this.margin = 0;
        this.conf = d;
        if (!this.$a.length) {
            console.log('SlideTabs: No tabs added.');
            return false
        }
        this.tabs = {};
        this.content = {};
        this.$container.addClass('slidetabs');
        this.isParent = (this.$views.find('.slidetabs').length) ? true : false;
        this.$parentViews = this.$container.parents('.' + d.classView);
        this.isChild = this.$parentViews.length > 0 ? true : false;
        this.tabs.total = this.$lis.length;
        this.content.animIsSlide = (this.conf.contentAnim == 'slideH' || this.conf.contentAnim == 'slideV') ? true : false;
        var e = this,
            href, fragmentId = /^#.+/,
            hrefBase, baseEl, slug;
        this.$a.each(function(i, a) {
            href = $(a).attr('href');
            hrefBase = href.split('#')[0];
            if (hrefBase && (hrefBase === location.toString().split('#')[0] || (baseEl = $('base')[0]) && hrefBase === baseEl.href)) {
                href = a.hash;
                a.href = href
            }
            if (href && !fragmentId.test(href) && href !== '#') {
                $.data(a, 'load.tabs', href.replace(/#.*$/, ''));
                slug = e.tabs_getSlug(this);
                a.href = '#' + slug;
                e.$view = e.$content.children('.' + slug);
                if (!e.$view.length) {
                    e.$view = $('<div></div>').addClass(slug + ' ' + d.classView);
                    e.$content.append(e.$view);
                    e.$views = e.$views.add(e.$view)
                }
            } else {
                slug = $(a).attr('data-target');
                if (slug) {
                    a.href = '#' + slug
                }
            }
        });
        this.$lis.first().addClass('st_li_first');
        this.$lis.last().addClass('st_li_last');
        this.$a.first().addClass('st_tab_first');
        this.$a.last().addClass('st_tab_last');
        this.$views.first().addClass('st_view_first');
        if (!this.$next.length) {
            this.$next = $('<a href="#" class="' + d.classBtnNext + '" />');
            this.$tabsCont.prepend(this.$next)
        }
        if (!this.$prev.length) {
            this.$prev = $('<a href="#" class="' + d.classBtnPrev + '" />');
            this.$tabsCont.prepend(this.$prev)
        }
        var f = ('ontouchstart' in window);
        if (d.touchSupport && f) {
            this.val.isTouch = true
        }
        var g = function(a) {
            a = a.toLowerCase();
            var b = /(chrome)[ \/]([\w.]+)/.exec(a) || /(webkit)[ \/]([\w.]+)/.exec(a) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a) || /(msie) ([\w.]+)/.exec(a) || a.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a) || [];
            return {
                browser: b[1] || '',
                version: b[2] || '0'
            }
        };
        var h = g(navigator.userAgent),
            browser = {};
        if (h.browser) {
            browser[h.browser] = true;
            browser.version = h.version
        }
        if (browser.chrome) {
            browser.webkit = true
        } else if (browser.webkit) {
            browser.safari = true
        }
        if (d.useWebKit) {
            if (f || browser.safari) {
                if ('WebKitCSSMatrix' in window && 'm11' in new WebKitCSSMatrix()) {
                    this.$container.addClass('st_webkit');
                    this.val.useWebKit = true;
                    if (d.tabsAnimSpeed == 0) {
                        d.tabsAnimSpeed = 1
                    }
                    if (d.contentAnimSpeed == 0) {
                        d.contentAnimSpeed = 1
                    }
                }
            }
        }
        if (d.orientation == 'horizontal') {
            this.$tabsInnerCont.css('overflow', 'hidden');
            this.val.topleft = 'left';
            this.val.outerWH = 'outerWidth';
            this.val.WH = 'width';
            this.val.clientXY = 'clientX';
            this.val.arrPos = 4;
            if (this.val.useWebKit) {
                this.val.css = '-webkit-transform';
                this.val.pre = 'translate3d(';
                this.val.px = 'px,0px,0px)'
            } else {
                this.val.css = 'marginLeft';
                this.val.pre = '';
                this.val.px = 'px'
            }
        } else {
            this.val.topleft = 'top';
            this.val.outerWH = 'outerHeight';
            this.val.WH = 'height';
            this.val.clientXY = 'clientY';
            this.val.arrPos = 5;
            if (this.val.useWebKit) {
                this.val.css = '-webkit-transform';
                this.val.pre = 'translate3d(0px,';
                this.val.px = 'px,0px)'
            } else {
                this.val.css = 'marginTop';
                this.val.pre = '';
                this.val.px = 'px'
            }
            var j = this.$prev.outerHeight(true),
                nextBtnH = this.$next.outerHeight(true);
            this.val.buttonsH = (j >= nextBtnH) ? j : nextBtnH
        }
        if (d.totalWidth.length > 0) {
            this.resize_width()
        }
        if (d.totalHeight.length > 0) {
            this.resize_height()
        }
        this.tabs_init();
        if (d.autoplay && !this.xhr) {
            this.autoplay_init()
        }
        $.each($.stExtend, function(a, b) {
            b.call(e)
        })
    };
    SlideTabs.prototype = {
        resize_width: function() {
            if (this.conf.totalWidth == 'auto') {
                this.$container.css('width', '100%')
            } else {
                this.$container.css('width', this.conf.totalWidth + 'px')
            }
        },
        resize_height: function() {
            var a = (this.$contentCont.outerHeight(true) - this.$contentCont.height()),
                newContentHeight;
            if (this.conf.orientation == 'vertical') {
                var b = (this.$tabsCont.outerHeight(false) - this.$tabsCont.height());
                newContentHeight = (this.conf.totalHeight - a);
                this.$tabsCont.css('height', (this.conf.totalHeight - b) + 'px');
                this.$contentCont.css('height', newContentHeight + 'px')
            } else {
                newContentHeight = (this.conf.totalHeight - (this.$tabsCont.outerHeight(true) + a));
                this.$contentCont.css('height', newContentHeight + 'px')
            }
            this.content.orgHeight = newContentHeight
        },
        tabs_init: function() {
            var a = this.tabs;
            a.animated = '#' + this.$container.attr('id') + ' .' + this.conf.classTabsList + ':animated';
            a.loop = false;
            a.slugCount = this.$a.length;
            a.tabsContWH = this.$tabsCont[this.val.outerWH](false);
            a.tabsOH = this.$tabs.outerHeight(true);
            a.tabsOrgWidth = this.tabs_getTotalLength();
            a.buttonsVisible = (this.$prev.is(':visible') || this.$next.is(':visible')) ? true : false;
            this.tabs_setSlideLength();
            this.tabs_posActive();
            this.tabs_bind()
        },
        tabs_getSlug: function(a) {
            var b = $(a).attr('data-target');
            return b && b.replace(/\s/g, '_').replace(/[^\w\u00c0-\uFFFF-]/g, '') || 'tab-' + this.total++
        },
        tabs_setUniqueSlug: function(a) {
            var b = this;
            b.$a.each(function() {
                if ($(this).attr('href') == '#' + a) {
                    b.slugCount++;
                    b.slug = 'tab-' + b.slugCount;
                    b.tabs_setUniqueSlug(b.slug);
                    return
                }
            })
        },
        tabs_getTotalLength: function() {
            var a = this,
                tabsTotWH = 0;
            a.$tabs.children('li').each(function() {
                tabsTotWH += parseInt($(this).css(a.val.WH))
            });
            return tabsTotWH
        },
        tabs_setSlideLength: function() {
            if (this.conf.tabsSlideLength == 0) {
                if (this.conf.orientation == 'horizontal') {
                    this.val.tabsSlideLength = this.$tabsInnerCont.outerWidth(false)
                } else {
                    var a = this.$tabsInnerCont.position().top;
                    if (this.$container.hasClass(this.conf.classTabSlidingEnabled)) {
                        a = (a == 0) ? this.val.buttonsH : a
                    }
                    this.val.tabsSlideLength = (parseInt(this.$tabsCont.css('height')) - a)
                }
            } else {
                this.val.tabsSlideLength = this.conf.tabsSlideLength
            }
        },
        tabs_bind: function() {
            var c = this,
                hash;
            if (c.conf.responsive == true) {
                var d = null,
                    limitXY;
                $(window).resize(function() {
                    if (d) {
                        clearTimeout(d)
                    }
                    d = setTimeout(function() {
                        if (c.$container.is(':hidden')) {
                            return false
                        }
                        if (c.conf.orientation == 'horizontal') {
                            c.tabs_setAutoWidth()
                        } else {
                            c.tabs_setAutoHeight()
                        }
                        if (c.conf.autoHeight == true && !c.isParent) {
                            c.content_setHeight(true)
                        }
                    }, 100)
                })
            }
            c.$prev.click(function() {
                if (c.tabs.isAnim) {
                    return false
                }
                c['tabs_' + c.conf.buttonsFunction + 'Prev']();
                return false
            }), c.$next.click(function() {
                if (c.tabs.isAnim) {
                    return false
                }
                c['tabs_' + c.conf.buttonsFunction + 'Next']();
                return false
            }), c.$tabs.delegate('li a.' + c.conf.classTab, 'click', function() {
                if (c.tabs.isAnim) {
                    return false
                }
                c.tabs_click(this, true);
                if (c.conf.tabsShowHash == false) {
                    return false
                }
            });
            if ($.fn.mousewheel && c.conf.tabsScroll) {
                c.$tabs.mousewheel(function(a, b) {
                    if (c.tabs.isAnim) {
                        return false
                    }(b > 0) ? c.tabs_slidePrev(): c.tabs_slideNext();
                    return false
                })
            }
            if (c.conf.externalLinking) {
                $('.' + c.conf.classExtLink).each(function() {
                    if ($(this).attr('rel') == c.$container.attr('id')) {
                        $(this).click(function() {
                            if (c.tabs.isAnim) {
                                return false
                            }
                            hash = c.tabs_getHash($(this));
                            c.$tab = c.tabs_findByRel(hash);
                            c.tabs_click(c.$tab);
                            if (c.conf.tabsShowHash == false) {
                                return false
                            }
                        })
                    }
                })
            }
        },
        tabs_setAutoWidth: function() {
            this.tabs_setSlideLength();
            var a = this.tabs_getTotalLength(),
                tabsContW = (this.buttonsVisible) ? parseInt(this.$tabsInnerCont.css('width')) : parseInt(this.$tabsCont.css('width'));
            if (this.$container.hasClass(this.conf.classTabSlidingEnabled)) {
                if (typeof(this.tabsDiff) == 'undefined') {
                    this.tabsDiff = (this.tabs.tabsOrgWidth - a)
                } else {
                    if (this.tabsDiff < 5) {
                        a = (a + this.tabsDiff)
                    }
                }
            }
            if (a <= tabsContW) {
                this.margin = (0 + this.conf.offsetBR);
                this.tabs_hideButtons();
                this.$tabs.css(this.val.css, this.val.pre + - +this.margin + this.val.px)
            } else {
                var b = parseInt(this.$tabsInnerCont.css('width')) - (this.$liLast.position().left + this.$liLast.outerWidth(false));
                if (b > (0 + this.conf.offsetBR)) {
                    this.margin = (this.margin - b);
                    this.tabs_posTabs();
                    this.tabs_disableButton(this.$next);
                    this.tabs_enableButton(this.$prev)
                } else {
                    this.tabs_initButtons()
                }
                this.$container.addClass(this.conf.classTabSlidingEnabled);
                this.tabs_showButtons()
            }
            this.tabs_setSlideLength();
            if (this.val.isTouch) {
                this.tabs_setSwipeLength()
            }
        },
        tabs_setAutoHeight: function() {
            if (this.resizeTimer) {
                clearTimeout(this.resizeTimer)
            }
            var b = this;
            this.resizeTimer = setTimeout(function() {
                b.tabs_setSlideLength();
                if (b.$tabs.outerHeight(false) < b.$tabsCont.outerHeight(true)) {
                    b.margin = (0 + b.conf.offsetBR);
                    b.tabs_hideButtons();
                    b.$tabs.css(b.val.css, b.val.pre + - +b.margin + b.val.px)
                } else {
                    var a, $liLast = b.$lis.last(),
                        $unalignedLi, gap = b.val.tabsSlideLength - ($liLast.position().top + $liLast.outerHeight(false)),
                        alignedTop = false,
                        alignedBottom = false;
                    if (gap > (0 + b.conf.offsetBR)) {
                        b.margin = (b.margin - gap);
                        b.tabs_posTabs();
                        b.tabs_disableButton(b.$next);
                        b.tabs_enableButton(b.$prev)
                    } else {
                        b.$lis.each(function() {
                            a = $(this);
                            gap = a.position().top;
                            if (gap == (0 + b.conf.offsetTL)) {
                                alignedTop = true
                            } else if ((gap + a.children('a').outerHeight(false)) == (b.val.tabsSlideLength - b.conf.offsetBR)) {
                                alignedBottom = true;
                                return false
                            } else if (gap < 0) {
                                $unalignedLi = a
                            }
                        });
                        if (!alignedTop && !alignedBottom) {
                            b.margin = (b.margin - Math.abs($unalignedLi.position().top));
                            b.tabs_posTabs()
                        }
                        b.tabs_initButtons()
                    }
                    b.$container.addClass(b.conf.classTabSlidingEnabled);
                    b.tabs_showButtons()
                }
                b.tabs_setSlideLength();
                if (b.val.isTouch) {
                    b.tabs_setSwipeLength()
                }
            }, 200)
        },
        tabs_posActive: function() {
            this.tabs_getActive();
            this.content_init(true);
            this.$liLast = this.$tabs.children('li:last');
            this.$tab = this.$tabActive;
            this.$tabActive = this.$tabActive.parents('li');
            if ((this.$liLast[this.val.outerWH](false) + this.$liLast.position()[this.val.topleft]) > this.val.tabsSlideLength) {
                this.$container.addClass(this.conf.classTabSlidingEnabled);
                this.tabs_showButtons();
                this.tabs_setSlideLength();
                this.tabs_setActivePos(this.$tab[this.val.outerWH](false), this.$tabActive.position()[this.val.topleft]);
                if (!this.conf.tabsLoop) {
                    this.tabs_initButtons()
                }
            }
        },
        tabs_setActivePos: function(a, b) {
            this.val.elemD = a;
            this.val.elemP = b;
            if (this.val.elemP > this.val.tabsSlideLength) {
                this.margin = (this.val.elemD + (this.val.elemP - this.val.tabsSlideLength));
                this.margin = (this.margin + this.conf.offsetBR)
            } else if ((this.val.elemP + this.val.elemD) > this.val.tabsSlideLength) {
                this.margin = (this.val.elemD - (this.val.tabsSlideLength - this.val.elemP));
                this.margin = (this.margin + this.conf.offsetBR)
            } else {
                this.margin = (this.margin - this.conf.offsetTL)
            }
            this.tabs_posTabs()
        },
        tabs_posTabs: function() {
            if (this.val.useWebKit) {
                this.$tabs.css('-webkit-transition-duration', '0ms')
            }
            this.$tabs.css(this.val.css, this.val.pre + -this.margin + this.val.px)
        },
        tabs_showAppended: function(a) {
            var b = this.tabs_getTotalLength();
            if (b > this.val.tabsSlideLength - this.conf.offsetBR) {
                this.$container.addClass(this.conf.classTabSlidingEnabled);
                this.tabs_showButtons();
                this.tabs_setButtonState();
                this.tabs_setSlideLength();
                if (a == true) {
                    b = this.tabs_getTotalLength();
                    this.margin = (b - this.val.tabsSlideLength) + this.conf.offsetBR;
                    this.tabs_animate(300)
                }
            }
        },
        tabs_initButtons: function() {
            if (this.conf.buttonsFunction == 'slide' && !this.conf.tabsLoop) {
                if (this.$lis.first().position()[this.val.topleft] == (0 + this.conf.offsetTL)) {
                    this.tabs_disableButton(this.$prev)
                } else {
                    this.tabs_enableButton(this.$prev)
                }
                if ((this.$liLast.position()[this.val.topleft] + this.$liLast[this.val.outerWH](false)) <= (this.val.tabsSlideLength - this.conf.offsetBR)) {
                    this.tabs_disableButton(this.$next)
                } else {
                    this.tabs_enableButton(this.$next)
                }
            } else {
                this.tabs_setButtonState()
            }
        },
        tabs_enableButton: function(a) {
            a.removeClass(this.conf.classBtnDisabled)
        },
        tabs_disableButton: function(a) {
            a.addClass(this.conf.classBtnDisabled)
        },
        tabs_showButtons: function() {
            this.$prev.css('display', 'block');
            this.$next.css('display', 'block');
            if (typeof(this.tabsDiff) == 'undefined') {
                var a = this.tabs_getTotalLength();
                this.tabsDiff = Math.abs(this.tabs.tabsOrgWidth - a)
            }
        },
        tabs_hideButtons: function() {
            this.$container.removeClass(this.conf.classTabSlidingEnabled);
            this.$prev.hide();
            this.$next.hide()
        },
        tabs_click: function(a, b, c, d) {
            if (this.content.isAnim || this.proccessing) {
                return false
            }
            this.$tab = $(a);
            if (this.$tab.hasClass(this.conf.classTabActive)) {
                return false
            }
            if (typeof(this.conf.onTabClick) == 'function') {
                this.conf.onTabClick.call(this, this.$tab)
            }
            var e = $.data(this.$tab[0], 'load.tabs');
            this.$li = this.$tab.parents('li');
            this.tabs_setActive();
            this.val.elemP = this.$li.position();
            this.val.activeElemP = this.$tabActive.parent('li').position();
            this.isSwipe = (c) ? true : false;
            this.tabs_slideClicked();
            if (this.conf.autoplay == true) {
                if (b) {
                    if (this.conf.autoplayClickStop) {
                        this.conf.autoplay = false;
                        this.autoplay_clearInterval()
                    } else {
                        this.val.index = this.$tab.parents('li').index();
                        if (!this.isPause) {
                            this.autoplay_setInterval()
                        }
                    }
                }
            }
            this.tabs.loop = (d) ? d : false;
            if (e) {
                this.tabs_load(this.$tab, e, c, true)
            } else {
                this.tabs_show(this.$tab, c)
            }
        },
        tabs_load: function(a, b, c, d) {
            this.proccessing = true;
            if (this.xhr) {
                this.xhr.abort();
                delete this.xhr
            }
            if (this.conf.autoplay == true) {
                this.autoplay_clearInterval()
            }
            if (this.conf.ajaxSpinner == true) {
                this.$container.append('<span id="st_spinner"></span>')
            }
            var e = this;
            this.xhr = $.ajax({
                url: b,
                dataType: 'html',
                success: function(r) {
                    $(e.$views[a.parent('li').index()]).html('<div class="' + e.conf.classViewInner + '">' + r + '</div>');
                    if (e.conf.ajaxCache) {
                        a.removeData('load.tabs')
                    }
                    if (typeof(e.conf.onAjaxComplete) == 'function') {
                        e.conf.onAjaxComplete.call(e, a)
                    }
                },
                error: function() {
                    $(e.$views[a.parent('li').index()]).html('<div class="' + e.conf.classViewInner + '">' + e.conf.ajaxError + '</div>')
                },
                complete: function() {
                    if (d) {
                        e.tabs_show(a, c)
                    } else {
                        if (e.conf.autoHeight == true) {
                            e.content_setHeight(false)
                        }
                    }
                    e.proccessing = false;
                    e.xhr = false;
                    $('#st_spinner').remove();
                    if (e.conf.autoplay) {
                        e.val.index = a.parents('li').index();
                        e.autoplay_setInterval()
                    }
                }
            })
        },
        tabs_show: function(a, b) {
            this.content_setIsAnim(true, 'pause');
            this.val.hash = this.tabs_getHash(a);
            this.$viewActive = this.$content.children('.' + this.conf.classViewActive).removeClass(this.conf.classViewActive);
            this.$view = this.$content.children('.' + this.val.hash).addClass(this.conf.classViewActive);
            this.$currentView = this.$view;
            if (this.conf.autoHeight == true) {
                this.content_setHeight(true)
            }
            if (this.val.useWebKit && this.content.animIsSlide) {
                this.content_bindWebKitCallback()
            }
            if (b > 0 && this.content.isTouch) {
                this['content_' + this.conf.contentAnim](b)
            } else {
                if (this.conf.contentAnim.length > 0) {
                    this['content_' + this.conf.contentAnim](b)
                } else {
                    this.$viewActive.css({
                        position: 'absolute',
                        visibility: 'hidden'
                    });
                    this.$view.css({
                        position: 'static',
                        visibility: 'visible'
                    });
                    this.content.isAnim = false
                }
            }
        },
        tabs_clickPrev: function() {
            if (this.tabs.isAnim || $(this.content.animated).length) {
                return false
            }
            this.val.$prevTab = this.tabs_find('prev');
            if (this.val.$prevTab.length) {
                this.tabs_click(this.val.$prevTab, true)
            } else {
                if (this.conf.tabsLoop == true) {
                    this.tabs_click(this.$tabs.children('li').find('a').last(), true, 0, 'prev')
                }
            }
        },
        tabs_clickNext: function() {
            if (this.tabs.isAnim || $(this.content.animated).length) {
                return false
            }
            this.val.$nextTab = this.tabs_find('next');
            if (this.val.$nextTab.length) {
                this.tabs_click(this.val.$nextTab, true)
            } else {
                if (this.conf.tabsLoop == true) {
                    this.tabs_click(this.$tabs.children('li').find('a').first(), true, 0, 'next')
                }
            }
        },
        tabs_find: function(a) {
            return this.$tab.parents('li')[a]().find('a.' + this.conf.classTab)
        },
        tabs_findByRel: function(a) {
            return this.$tabs.find('[rel=' + a + ']')
        },
        tabs_getHash: function(a) {
            this.val.hash = a.attr('href');
            return this.val.hash.substring((this.val.hash.indexOf('#') + 1))
        },
        tabs_getActive: function() {
            if (this.conf.urlLinking == true && location.hash) {
                this.$tabActive = this.tabs_findByRel(location.hash.slice(1))
            }
            if (!this.$tabActive.length) {
                var a = (this.conf.tabsSaveState == true && $.cookie) ? $.cookie(this.$container.attr('id')) : false;
                if (a) {
                    this.tabs_removeActive();
                    this.$tabActive = this.$a.eq(a).addClass(this.conf.classTabActive);
                    if (!this.$tabActive.length) {
                        this.tabs_setFirstActive()
                    }
                } else {
                    this.$tabActive = this.$tabs.children('li').find('.' + this.conf.classTabActive);
                    if (!this.$tabActive.length) {
                        this.tabs_setFirstActive()
                    }
                }
                this.$tabActive.parent('li').addClass(this.conf.classTabActiveParent)
            } else {
                this.tabs_removeActive();
                this.$tabActive.addClass(this.conf.classTabActive).parent('li').addClass(this.conf.classTabActiveParent)
            }
            this.tabs_saveActive(this.$tabActive)
        },
        tabs_setFirstActive: function() {
            this.$tabActive = this.$tabs.find('a:first').addClass(this.conf.classTabActive)
        },
        tabs_removeActive: function() {
            this.$tabs.children('li').find('.' + this.conf.classTabActive).removeClass(this.conf.classTabActive).parent('li').removeClass(this.conf.classTabActiveParent)
        },
        tabs_setActive: function() {
            this.$tabActive = this.$tabs.children('li').find('a.' + this.conf.classTabActive).removeClass(this.conf.classTabActive);
            this.$tabActive.parent('li').removeClass(this.conf.classTabActiveParent);
            this.$tab.addClass(this.conf.classTabActive).parent('li').addClass(this.conf.classTabActiveParent);
            this.tabs_saveActive(this.$tab)
        },
        tabs_saveActive: function(a) {
            if ($.cookie) {
                $.cookie(this.$container.attr('id'), a.parents('li').index())
            }
        },
        tabs_slideClicked: function() {
            if (this.tabs.isAnim) {
                return false
            }
            this.val.elemP = this.val.elemP[this.val.topleft];
            this.val.elemD = this.$li[this.val.outerWH](false);
            this.val.aD = this.$li.children('a')[this.val.outerWH](false);
            this.val.nextElemPos = (this.$li.next().length == 1) ? this.$li.next().position()[this.val.topleft] : 0;
            if (this.val.elemP < (0 + this.conf.offsetTL)) {
                this.tabs.isAnim = true;
                this.val.elemHidden = (this.val.elemD - this.val.nextElemPos);
                this.margin = (this.margin - (this.val.elemHidden + this.conf.offsetTL));
                this.tabs_enableButton(this.$next);
                this.tabs_animate()
            } else if ((this.val.aD + this.val.elemP) > (this.val.tabsSlideLength - this.conf.offsetBR)) {
                this.tabs.isAnim = true;
                this.margin += (this.val.aD - (this.val.tabsSlideLength - (this.val.elemP + this.conf.offsetBR)));
                this.tabs_enableButton(this.$prev);
                this.tabs_animate()
            }
            this.tabs_setButtonState()
        },
        tabs_slidePrev: function(b) {
            if ($(this.tabs.animated).length || !this.$container.hasClass(this.conf.classTabSlidingEnabled)) {
                return false
            }
            this.tabs.isAnim = true;
            if (typeof(this.conf.onTabPrevSlide) == 'function') {
                this.conf.onTabPrevSlide.call(this, this.$tab)
            }
            var c = this,
                $lis = this.$tabs.children('li');
            $lis.each(function() {
                c.$li = $(this);
                c.val.elemP = c.$li.position()[c.val.topleft];
                if (c.val.elemP >= (-1 + c.conf.offsetTL)) {
                    if (c.conf.tabsToSlide > 1) {
                        var a = c.$li.index(),
                            index = ((a - c.conf.tabsToSlide)),
                            isFirst = (a > 0) ? 1 : 0;
                        index = (index < 0) ? isFirst : (index + 1);
                        c.$li = $lis.eq(index);
                        c.val.elemP = c.$li.position()[c.val.topleft]
                    }
                    c.$li = c.$li.prev();
                    if (!c.$li.length) {
                        if (c.conf.tabsLoop && typeof(b) == 'undefined') {
                            c.$liLast = $lis.last();
                            c.val.elemP = c.$liLast.position()[c.val.topleft];
                            c.margin = ((((c.val.elemP + c.$liLast[c.val.outerWH](false)) - c.conf.offsetTL) - c.val.tabsSlideLength) + c.conf.offsetBR);
                            c.$li = c.$liLast
                        } else {
                            c.tabs.isAnim = false
                        }
                    } else {
                        c.val.elemHidden = (c.$li[c.val.outerWH](true) - c.val.elemP);
                        c.margin = ((c.margin - c.val.elemHidden) - c.conf.offsetTL)
                    }
                    if (c.$li.length) {
                        c.tabs_animate(b)
                    }
                    if (c.conf.buttonsFunction == 'slide') {
                        c.tabs_setButtonState(c.$next)
                    }
                    return false
                }
            })
        },
        tabs_slideNext: function(a) {
            if ($(this.tabs.animated).length || !this.$container.hasClass(this.conf.classTabSlidingEnabled)) {
                return false
            }
            this.tabs.isAnim = true;
            if (typeof(this.conf.onTabNextSlide) == 'function') {
                this.conf.onTabNextSlide.call(this, this.$tab)
            }
            var b = this,
                $lis = this.$tabs.children('li'),
                $thisA;
            $lis.each(function() {
                b.$li = $(this);
                $thisA = b.$li.children('a');
                b.val.elemD = $thisA[b.val.outerWH](false);
                b.val.elemP = b.$li.position()[b.val.topleft];
                if (Math.round(b.val.elemD + b.val.elemP) > (b.val.tabsSlideLength + Math.abs(b.conf.offsetBR))) {
                    if (b.conf.tabsToSlide > 1) {
                        b.$li = $lis.eq((b.$li.index() + b.conf.tabsToSlide) - 1);
                        if (!b.$li.length) {
                            b.$li = $lis.last()
                        }
                        $thisA = b.$li.children('a');
                        b.val.elemD = $thisA[b.val.outerWH](false);
                        b.val.elemP = b.$li.position()[b.val.topleft]
                    }
                    b.val.elemHidden = (b.val.tabsSlideLength - b.val.elemP);
                    b.margin += ((b.val.elemD - b.val.elemHidden) + b.conf.offsetBR);
                    b.tabs_animate(a);
                    if (b.conf.buttonsFunction == 'slide') {
                        b.tabs_setButtonState(b.$prev)
                    }
                    return false
                } else if (b.$li.index() + 1 == b.$a.length) {
                    if (b.conf.tabsLoop == true && typeof(a) == 'undefined') {
                        b.margin = (0 - b.conf.offsetTL);
                        b.tabs_animate(a);
                        if (b.conf.buttonsFunction == 'slide') {
                            b.tabs_setButtonState(b.$prev)
                        }
                    } else {
                        b.tabs.isAnim = false
                    }
                }
            })
        },
        tabs_animate: function(a) {
            var b = this,
                animSpeed = (a > 0) ? a : b.conf.tabsAnimSpeed;
            if (b.val.useWebKit) {
                b.tabs_bindWebKitCallback();
                b.$tabs.css({
                    '-webkit-transition-duration': animSpeed + 'ms',
                    '-webkit-transition-timing-function': 'ease-out',
                    '-webkit-transform': b.val.pre + -b.margin + b.val.px
                })
            } else {
                if (b.conf.orientation == 'horizontal') {
                    b.$tabs.animate({
                        'marginLeft': - +b.margin + 'px'
                    }, animSpeed, b.conf.tabsEasing, function() {
                        b.tabs_setIsAnim(false, 'resume')
                    })
                } else {
                    b.$tabs.animate({
                        'marginTop': - +b.margin + 'px'
                    }, animSpeed, b.conf.tabsEasing, function() {
                        b.tabs_setIsAnim(false, 'resume')
                    })
                }
            }
        },
        tabs_setButtonState: function(a) {
            if (!this.conf.tabsLoop) {
                if (this.conf.buttonsFunction == 'click') {
                    this.$li = this.$tab.parents('li')
                }
                if (this.$li.is(':first-child')) {
                    this.tabs_disableButton(this.$prev);
                    this.tabs_enableButton(this.$next)
                } else if (this.$li.is(':last-child')) {
                    this.tabs_disableButton(this.$next);
                    this.tabs_enableButton(this.$prev)
                } else {
                    if (a) {
                        this.tabs_enableButton(a)
                    } else if (this.conf.buttonsFunction == 'click') {
                        this.tabs_enableButton(this.$prev);
                        this.tabs_enableButton(this.$next)
                    }
                }
            }
        },
        tabs_fixE: function(e) {
            if (typeof e == 'undefined') e = window.event;
            if (typeof e.layerX == 'undefined') e.layerX = e.offsetX;
            if (typeof e.layerY == 'undefined') e.layerY = e.offsetY;
            return e
        },
        tabs_WebKitPosition: function(a, b) {
            var c = window.getComputedStyle(a.get(0), null).getPropertyValue('-webkit-transform'),
                wkValArray = c.replace(/^matrix\(/i, '').split(/, |\)$/g),
                val = parseInt(wkValArray[b], 10);
            return (isNaN(val)) ? 0 : val
        },
        tabs_bindWebKitCallback: function() {
            var a = this;
            a.$tabs.unbind('webkitTransitionEnd').bind('webkitTransitionEnd', function() {
                a.tabs_setIsAnim(false, 'resume')
            })
        },
        tabs_setIsAnim: function(a, b) {
            this.tabs.isAnim = a;
            if (this.conf.autoplay) {
                this['autoplay_' + b](false, true)
            }
        },
        content_init: function(a) {
            var b = this.content;
            if (this.conf.contentAnim == 'slideV') {
                b.owh = 'outerHeight';
                b.wh = 'height';
                b.clientXY = 'clientY';
                b.arrPos = 5;
                if (this.val.useWebKit) {
                    b.css = '-webkit-transform';
                    b.pre = 'translate3d(0px,';
                    b.px = 'px,0px)'
                } else {
                    b.css = 'top';
                    b.pre = '';
                    b.px = 'px'
                }
            } else {
                b.owh = 'outerWidth';
                b.wh = 'width';
                b.clientXY = 'clientX';
                b.arrPos = 4;
                if (this.val.useWebKit) {
                    b.css = '-webkit-transform';
                    b.pre = 'translate3d(';
                    b.px = 'px,0px,0px)'
                } else {
                    b.css = 'left';
                    b.pre = '';
                    b.px = 'px'
                }
            }
            b.isAnim = false;
            b.dist = 0;
            if (a == true) {
                b.animated = '#' + this.$container.attr('id') + ' .' + this.conf.classViewsContainer + ' :animated';
                b.orgHeight = 0;
                b.height = 0;
                this.content_showActive();
                var c = $.data(this.$tabActive[0], 'load.tabs');
                if (c) {
                    this.tabs_load(this.$tabActive, c)
                }
            }
        },
        content_reInit: function() {
            this.content.oldCSS = this.content.css;
            this.content_init(false);
            if (this.val.useWebKit) {
                this.$views.css('-webkit-transition-duration', '')
            }
            this.$views.css(this.content.oldCSS, '').css('visibility', '');
            this.content_positionContent()
        },
        content_showActive: function() {
            var a = this.tabs_getHash(this.$tabActive);
            this.$view = this.$content.children('.' + a).addClass(this.conf.classViewActive);
            this.$currentView = this.$view;
            if (this.conf.autoHeight == true) {
                var b = this.$view.children('.' + this.conf.classViewInner).css('height', 'auto');
                if (b.length) {
                    this.content.height = b.outerHeight(true)
                } else {
                    this.$views.css('height', 'auto');
                    this.content.height = this.$view.outerHeight(true)
                }
                this.content.orgHeight = this.content.height;
                this.$content.css('height', this.content.height + 'px')
            }
            this.content_positionContent()
        },
        content_positionContent: function() {
            if (this.conf.contentAnim) {
                if (this.val.useWebKit) {
                    this.$views.css('-webkit-transition-duration', '0ms');
                    this.$view.css(this.content.css, this.content.pre + '0' + this.content.px)
                }
                this.$content.children('div').css('position', 'absolute').not('div.' + this.conf.classViewActive).css(this.content.css, this.content.pre + this.conf.viewportOffset + this.content.px)
            } else {
                this.$views.not('div.' + this.conf.classViewActive).css({
                    position: 'absolute',
                    visibility: 'hidden'
                })
            }
        },
        content_rePositionView: function() {
            if (this.val.useWebKit) {
                this.$views.css('-webkit-transition-duration', '0ms')
            }
            this.$viewActive.css(this.content.css, this.content.pre + this.conf.viewportOffset + this.content.px).show();
            if (this.isSwipe) {
                var a = (this.$currentView.index() > this.$viewActive.index()) ? this.$viewActive.prev() : this.$viewActive.next();
                a.css(this.content.css, this.content.pre + this.conf.viewportOffset + this.content.px).show()
            }
        },
        content_setParentsHeight: function(a) {
            var b = this,
                $this, $content, $viewInner, total = b.$parentViews.length,
                isLast, height;
            b.$parentViews.each(function(i) {
                $this = $(this);
                $content = $this.parent();
                isLast = ((i + 1) == total) ? true : false;
                if (isLast) {
                    if (!$this.hasClass(b.conf.classViewActive)) {
                        return false
                    }
                }
                $viewInner = $content.children('.' + b.conf.classViewActive).children('.' + b.conf.classViewInner).css('height', 'auto');
                height = b.content_getHeight($viewInner, $this);
                if (isLast && b.conf.autoHeightSpeed > 0 && a) {
                    $content.animate({
                        'height': height + 'px'
                    }, b.conf.autoHeightSpeed)
                } else {
                    $content.css('height', height + 'px')
                }
            })
        },
        content_setHeight: function(a) {
            this.$view.css('height', 'auto');
            var b = this.$view.children('.' + this.conf.classViewInner).css('height', 'auto');
            this.content.height = this.content_getHeight(b, this.$view);
            if (!this.isChild && this.conf.autoHeightSpeed > 0 && a) {
                this.$content.animate({
                    'height': this.content.height + 'px'
                }, this.conf.autoHeightSpeed)
            } else {
                this.$content.css('height', this.content.height + 'px');
                if (this.isChild) {
                    this.content_setParentsHeight(a)
                }
            }
        },
        content_getHeight: function(a, b) {
            var c = a.outerHeight(true);
            if (c == 0 || c == null) {
                c = b.outerHeight(true);
                if (c == 0) {
                    c = this.content.orgHeight
                }
            }
            return c
        },
        content_resetAutoHeight: function() {
            this.$contentCont.removeAttr('style');
            this.$content.removeAttr('style');
            this.$view.children('.' + this.conf.classViewInner).removeAttr('style')
        },
        content_fade: function() {
            var a = this;
            a.$view.hide().css(a.content.css, a.content.pre + 0 + a.content.px).fadeIn(a.conf.contentAnimSpeed, function() {
                a.content_setIsAnim(false, 'resume');
                if (typeof(a.conf.onContentVisible) == 'function') {
                    a.conf.onContentVisible.call(a, a.$tab)
                }
            });
            a.$viewActive.fadeOut(a.conf.contentAnimSpeed, function() {
                a.content_rePositionView()
            })
        },
        content_fadeOutIn: function() {
            var a = this;
            a.$view.hide().css(a.content.css, a.content.pre + 0 + a.content.px);
            a.$viewActive.fadeOut(a.conf.contentAnimSpeed, function() {
                a.$view.fadeIn(a.conf.contentAnimSpeed, function() {
                    a.content_rePositionView();
                    a.content_setIsAnim(false, 'resume')
                });
                if (typeof(a.conf.onContentVisible) == 'function') {
                    a.conf.onContentVisible.call(a, a.$tab)
                }
            })
        },
        content_webKitSlide: function(a, b) {
            this.$viewActive.css({
                '-webkit-transition-duration': a + 'ms',
                '-webkit-transition-timing-function': b,
                '-webkit-transform': this.content.pre + this.val.animVal + this.content.px
            });
            this.$view.css({
                '-webkit-transition-duration': a + 'ms',
                '-webkit-transition-timing-function': b,
                '-webkit-transform': 'translate3d(0px,0px,0px)'
            })
        },
        content_bindWebKitCallback: function(a) {
            var b = this;
            b.$currentView.bind('webkitTransitionEnd', function() {
                b.$currentView.unbind('webkitTransitionEnd');
                if (a) {
                    b.content_slideBackRePos()
                } else {
                    b.content_rePositionView()
                }
                b.content_setIsAnim(false, 'resume');
                if (typeof(b.conf.onContentVisible) == 'function') {
                    b.conf.onContentVisible.call(b, b.$tab)
                }
            })
        },
        content_slideH: function(a) {
            var b = this;
            b.val.wh = b.$contentCont.width();
            b.content_setSlideValues();
            if (b.val.useWebKit) {
                if (a > 0) {
                    b.content_webKitSlide(a, 'ease-out')
                } else {
                    b.$view.css({
                        '-webkit-transition-duration': '0ms',
                        '-webkit-transform': 'translate3d(' + b.val.cssVal + 'px,0px,0px)'
                    });
                    setTimeout(function() {
                        b.content_webKitSlide(b.conf.contentAnimSpeed, 'ease-in-out')
                    }, 30)
                }
            } else {
                if (a > 0) {
                    b.val.easing = 'easeOutSine'
                } else {
                    b.$view.css('left', b.val.cssVal);
                    a = b.conf.contentAnimSpeed;
                    b.val.easing = b.conf.contentEasing
                }
                b.$viewActive.animate({
                    'left': b.val.animVal
                }, a, b.val.easing);
                b.$view.animate({
                    'left': '0px'
                }, a, b.val.easing, function() {
                    b.content_rePositionView();
                    b.content_setIsAnim(false, 'resume');
                    if (typeof(b.conf.onContentVisible) == 'function') {
                        b.conf.onContentVisible.call(b, b.$tab)
                    }
                })
            }
        },
        content_slideV: function(a) {
            var b = this;
            b.val.wh = b.$contentCont.height();
            if (b.content.height > b.val.wh) {
                b.val.wh = b.content.height
            }
            b.content_setSlideValues();
            if (b.val.useWebKit) {
                if (a > 0) {
                    b.content_webKitSlide(a, 'ease-out')
                } else {
                    b.$view.css({
                        '-webkit-transition-duration': '0ms',
                        '-webkit-transform': 'translate3d(0px,' + b.val.cssVal + 'px,0px)'
                    });
                    setTimeout(function() {
                        b.content_webKitSlide(b.conf.contentAnimSpeed, 'ease-in-out')
                    }, 30)
                }
            } else {
                if (a > 0) {
                    b.val.easing = 'easeOutSine'
                } else {
                    b.$view.css('top', b.val.cssVal);
                    a = b.conf.contentAnimSpeed;
                    b.val.easing = b.conf.contentEasing
                }
                b.$viewActive.animate({
                    'top': b.val.animVal
                }, a, b.val.easing);
                b.$view.animate({
                    'top': '0px'
                }, a, b.val.easing, function() {
                    b.content_rePositionView();
                    b.content_setIsAnim(false, 'resume');
                    if (typeof(b.conf.onContentVisible) == 'function') {
                        b.conf.onContentVisible.call(b, b.$tab)
                    }
                })
            }
        },
        content_setSlideValues: function() {
            if (this.tabs.loop != false) {
                this.content.isNext = (this.tabs.loop == 'next') ? true : false
            } else {
                this.content.isNext = (this.$viewActive.index() < this.$view.index()) ? true : false
            }
            if (this.content.isNext) {
                this.val.animVal = -this.val.wh;
                this.val.cssVal = this.val.wh
            } else {
                this.val.animVal = this.val.wh;
                this.val.cssVal = -this.val.wh
            }
        },
        content_setIsAnim: function(a, b) {
            this.content.isAnim = a;
            if (this.conf.autoplay) {
                this['autoplay_' + b](false, true)
            }
        },
        autoplay_init: function() {
            this.val.index = (this.$tabActive.index() >= 0) ? this.$tabActive.index() : 0;
            this.isPause = false;
            this.autoplay_setInterval()
        },
        autoplay_setInterval: function() {
            var a = this;
            a.autoplay_clearInterval();
            a.intervalId = setInterval(function() {
                a.autoplay_nextTab()
            }, a.conf.autoplayInterval)
        },
        autoplay_clearInterval: function() {
            clearInterval(this.intervalId)
        },
        autoplay_nextTab: function() {
            if (!this.$container.is(':visible')) {
                this.autoplay_clearInterval();
                return false
            }
            this.val.index++;
            if (this.val.index == this.$a.length) {
                this.val.index = 0
            }
            if (this.conf.tabsLoop == true) {
                this.tabs_click($(this.$a[this.val.index]), false, 0, 'next')
            } else {
                this.tabs_click($(this.$a[this.val.index]))
            }
        },
        autoplay_pause: function(a) {
            if (a) {
                this.conf.autoplay = false
            }
            this.isPause = true;
            this.autoplay_clearInterval()
        },
        autoplay_resume: function(a) {
            if (a) {
                this.conf.autoplay = true
            }
            this.isPause = false;
            this.autoplay_setInterval()
        },
        addTab: function(a, b, c) {
            var d = this.tabs;
            if ($(d.animated).length) {
                return false
            }
            d.total++;
            d.slug = 'tab-' + d.total;
            this.tabs_setUniqueSlug(d.slug);
            this.$a.last().removeClass('st_tab_last').parents('li').removeClass('st_li_last');
            this.$tabs.append('<li><a href="#' + d.slug + '" rel="' + d.slug + '" class="' + this.conf.classTab + ' st_tab_' + d.total + '">' + a + '</a></li>');
            this.$content.append('<div class="' + d.slug + ' ' + this.conf.classView + '"><div class="' + this.conf.classViewInner + '">' + b + '</div></div>');
            this.$lis = this.$tabs.children('li');
            this.$li = this.$lis.last();
            this.$liLast = this.$li;
            this.$a = this.$lis.find('a');
            this.$views = this.$content.children('.' + this.conf.classView);
            if (d.total == 1) {
                this.$content.children('div').addClass(this.conf.classViewActive).css('position', 'absolute').css(this.content.css, this.content.pre + '0' + this.content.px);
                this.$a.addClass('st_tab_first ' + this.conf.classTabActive).parent('li').addClass('st_li_first ' + this.conf.classTabActiveParent)
            } else {
                var e = {};
                e['position'] = 'absolute';
                if (this.conf.contentAnim) {
                    e[this.content.css] = this.content.pre + this.conf.viewportOffset + this.content.px
                } else {
                    e['visibility'] = 'hidden'
                }
                this.$content.children('div').last().css(e);
                this.$a.last().addClass('st_tab_last').parent('li').addClass('st_li_last')
            }
            d.tabsOrgWidth = this.tabs_getTotalLength();
            this.tabs_showAppended(c);
            if (this.val.isTouch) {
                this.tabs_setSwipeLength();
                if (this.content.animIsSlide) {
                    this.content_bindTouch()
                }
            }
        },
        removeTab: function(a) {
            if ($(this.content.animated).length) {
                return false
            }
            var b = this.$tabs.children('li').length;
            a = a >= 1 ? a - 1 : b - 1;
            this.$li = this.$tabs.children('li').eq(a);
            if (this.$li.children('a').hasClass(this.conf.classTabActive)) {
                var c;
                if (a == 0) {
                    c = this.$li.next().addClass('st_li_first');
                    c = c.length > 0 ? c.children('a').addClass('st_tab_first') : this.$li.children('a')
                } else {
                    c = this.$li.prev().children('a')
                }
                this.val.hash = this.tabs_getHash(c);
                c.parents('li').addClass(this.conf.classTabActiveParent);
                c.addClass(this.conf.classTabActive);
                this.$view = this.$content.children('.' + this.val.hash).show().css(this.content.css, this.content.pre + '0' + this.content.px).addClass(this.conf.classViewActive);
                this.$currentView = this.$view;
                if (this.conf.autoHeight == true) {
                    this.content_setHeight(true)
                }
                this.$tab = this.$li.prev().children('a.' + this.conf.classTab)
            }
            if (this.$li.hasClass('st_li_last')) {
                this.$li.prev().addClass('st_li_last').children('a').addClass('st_tab_last')
            }
            this.$li.remove();
            this.$content.children('div').eq(a).remove();
            var d = this.tabs_getTotalLength();
            if (d > this.$tabsCont[this.val.outerWH](false) - this.conf.offsetBR) {
                this.margin = d - this.val.tabsSlideLength + this.conf.offsetBR;
                if (this.conf.buttonsFunction == 'slide') {
                    this.tabs_enableButton(this.$prev);
                    this.tabs_disableButton(this.$next)
                } else {
                    if ((b - 2) == this.$tab.parents('li').index()) {
                        this.tabs_disableButton(this.$next)
                    }
                }
            } else {
                this.margin = 0;
                this.$prev.hide();
                this.$next.hide();
                this.$container.removeClass(this.conf.classTabSlidingEnabled);
                this.tabs.tabsOrgWidth = this.tabs_getTotalLength();
                this.tabs_setSlideLength()
            }
            this.tabs_animate(300);
            this.$lis = this.$tabs.children('li');
            this.$liLast = this.$lis.last();
            this.$a = this.$lis.find('a');
            this.$views = this.$content.children('.' + this.conf.classView);
            this.tabs.total = this.$a.length;
            if (this.val.isTouch) {
                this.tabs_setSwipeLength()
            }
        },
        goTo: function(a) {
            var b = this.$a.eq(a - 1);
            if (b.length) {
                this.tabs_click(b)
            }
        },
        goToPrev: function() {
            this.tabs_clickPrev()
        },
        goToNext: function() {
            this.tabs_clickNext()
        },
        slidePrev: function() {
            this.tabs_slidePrev()
        },
        slideNext: function() {
            this.tabs_slideNext()
        },
        setOptions: function(c) {
            $.each(c, function(a, b) {
                if (b == 'true') {
                    c[a] = true
                } else if (b == 'false') {
                    c[a] = false
                }
            });
            var d = (c.contentAnim != this.conf.contentAnim) ? true : false;
            this.conf = $.extend(true, {}, this.conf, c);
            this.content.animIsSlide = (c.contentAnim == 'slideH' || c.contentAnim == 'slideV') ? true : false;
            if (c.tabsSlideLength > 0) {
                this.tabs_setSlideLength();
                if (this.val.isTouch) {
                    this.tabs_setSwipeLength()
                }
            }
            if (c.buttonsFunction == 'click') {
                this.tabs_setButtonState()
            } else if (c.buttonsFunction == 'slide') {
                this.$liLast = this.$tabs.children('li:last');
                this.tabs_initButtons()
            }
            if (c.tabsLoop == true) {
                this.tabs_enableButton(this.$prev);
                this.tabs_enableButton(this.$next)
            } else if (c.tabsLoop == false) {
                this.tabs_initButtons()
            }
            if (this.conf.tabsScroll == true) {
                var e = this;
                e.$tabs.mousewheel(function(a, b) {
                    (b > 0) ? e.tabs_slidePrev(): e.tabs_slideNext();
                    return false
                })
            } else if (this.conf.tabsScroll == false) {
                this.$tabs.unmousewheel()
            }
            if (c.autoHeight == true) {
                this.content_setContentHeight()
            } else if (c.autoHeight == false) {
                this.content_resetAutoHeight()
            }
            if (d) {
                this.content_reInit()
            }
            if (this.val.isTouch) {
                if (this.content.animIsSlide) {
                    this.content_bindTouch()
                } else {
                    this.content_unbindTouch()
                }
            } else {
                if (c.touchSupport == true) {
                    if ('ontouchstart' in window) {
                        this.val.isTouch = true;
                        this.tabs_bindTouch();
                        this.content_bindTouch()
                    }
                } else if (c.touchSupport == false) {
                    this.tabs_unbindTouch();
                    this.content_unbindTouch()
                }
            }
        },
        setContentHeight: function() {
            this.content_setHeight(true)
        },
        pauseAutoplay: function() {
            this.autoplay_pause(true)
        },
        resumeAutoplay: function() {
            this.autoplay_resume(true)
        },
        destroy: function() {
            this.autoplay_clearInterval();
            this.$tabs.undelegate('li a.' + this.conf.classTab, 'click').css(this.val.css, this.val.pre + '0' + this.val.px);
            this.$prev.unbind('click');
            this.$next.unbind('click');
            this.tabs_hideButtons();
            if ($.fn.unmousewheel) {
                this.$tabs.unmousewheel()
            }
            if (this.val.isTouch) {
                this.tabs_unbindTouch();
                this.content_unbindTouch()
            }
            $('a.' + this.conf.classExtLink).each(function() {
                $(this).unbind('click')
            })
        },
        getSettings: function() {
            return this.conf
        }
    };
    $.stCore = SlideTabs.prototype;
    $.fn.slidetabs = function(a) {
        var b, conf = $.extend(true, {}, $.fn.slidetabs.defaults, a),
            returnArr = [];
        this.each(function() {
            b = this;
            if (!b.slidetabs) {
                b.slidetabs = new SlideTabs($(b), conf)
            }
            returnArr.push(b.slidetabs)
        });
        return returnArr.length > 1 ? returnArr : returnArr[0]
    };
    $.fn.slidetabs.defaults = {
        ajaxCache: true,
        ajaxError: 'Failed to load content.',
        ajaxSpinner: false,
        autoplay: false,
        autoplayClickStop: false,
        autoplayInterval: 5000,
        autoHeight: false,
        autoHeightSpeed: 0,
        buttonsFunction: 'slide',
        classAutoplayCont: 'st_autoplay',
        classBtnDisabled: 'st_btn_disabled',
        classBtnNext: 'st_next',
        classBtnPrev: 'st_prev',
        classExtLink: 'st_ext',
        classNoTouch: 'st_no_touch',
        classTab: 'st_tab',
        classTabActive: 'st_tab_active',
        classTabActiveParent: 'st_li_active',
        classTabSlidingEnabled: 'st_sliding_active',
        classTabsContainer: 'st_tabs',
        classTabsList: 'st_tabs_ul',
        classView: 'st_view',
        classViewActive: 'st_view_active',
        classViewInner: 'st_view_inner',
        classViewsContainer: 'st_views',
        classViewsInner: 'st_views_wrap',
        contentAnim: 'slideH',
        contentAnimSpeed: 600,
        contentEasing: 'easeInOutExpo',
        externalLinking: false,
        offsetBR: 0,
        offsetTL: 0,
        onAjaxComplete: null,
        onContentVisible: null,
        onTabClick: null,
        onTabNextSlide: null,
        onTabPrevSlide: null,
        orientation: 'horizontal',
        responsive: false,
        tabsAnimSpeed: 300,
        tabsEasing: '',
        tabsLoop: false,
        tabsSaveState: false,
        tabsScroll: true,
        tabsShowHash: false,
        tabsSlideLength: 0,
        tabsToSlide: 1,
        totalHeight: '',
        totalWidth: '',
        touchSupport: false,
        urlLinking: false,
        useWebKit: true,
        viewportOffset: '2560'
    }
})(jQuery);